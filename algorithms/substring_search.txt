Algorithm from site:

Algorithm 1: Generic SIMD
Algorithm
This algorithm is suitable for all SIMD instruction sets and also SWAR approach. It uses as a predicate equality of the first and the last characters from the substring.

These two characters are populated in two registers, F and L respectively. Then in each iteration two chunks of strings are loaded. The first chunk (A) is read from offset i (where i is the current offset) and the second chunk (B) is read from offset i + k - 1, where k is substring's length.

Then we compute a vector expression F == A and B == L. This step yields a byte vector (or a bit mask), where "true" values denote position of potential substring occurrences. Finally, just at these positions an exact comparisons of substrings are performed.

Example
Let's assume 8-byte registers. We're searching for word "cat", thus:

F    = [ c | c | c | c | c | c | c | c ]
L    = [ t | t | t | t | t | t | t | t ]
We're searching in the string "a_cat_tries". In the first iteration the register A gets data from offset 0, B from offset 2:

A    = [ a | _ | c | a | t | _ | t | r ]
B    = [ c | a | t | _ | t | r | i | e ]
Now we compare:

AF   = (A == F)
     = [ 0 | 0 | 1 | 0 | 0 | 0 | 0 | 0 ]

BL   = (B == L)
     = [ 0 | 0 | 1 | 0 | 1 | 0 | 0 | 0 ]
After merging comparison results, i.e. AF & BL, we get following mask:

mask = [ 0 | 0 | 1 | 0 | 0 | 0 | 0 | 0 ]
Since the mask is non-zero, it means there are possible substring occurrences. As we see, there is only one non-zero element at index 2, thus only one substring comparison must be performed.



This algorithm works by trying to first match the first and last letter of the string we are searching for in the big string.

SIMD helps us since it can check for matches 16 letters at a time

Ex: Finding World in Hello World

//First letter of word we are looking for
F = [W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W]
//Last letter of word we are looking for
L = [d, d, d, d, d, d, d, d, d, d, d, d, d, d, d, d]

//Current i : i + 16 characters of string
A = [H, e, l, l, o,  , W, o, r, l, d,  ,  ,  ,  ,  ]
//Next i + k - 1 : i + 16 + k - 1 characters of string
B = [o,  , W, o, r, l, d,  ,  ,  ,  ,  ,  ,  ,  ,  ]

// compare F = B1 for 16 letters
AF = [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0]
// compare L = B2 for 16 letters
BL = [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0]

// M = AF & BL
M = [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0]

//A 1 bit means that we need to check for at that bit location
//We can check substring equality using vector ops easily

//Load s[i + j : i + j + k - 1]
C = [W, o, r, l, d]

//The substring
S = [W, o, r, l, d]

//Subtract S from C using vsub
D = C - S = [0, 0, 0, 0, 0]

//Since D is all zeros we found our match


Psuedocode:

//From the site
size_t avx2_strstr_anysize(const char* s, size_t n, const char* needle, size_t k) {

    const __m256i first = _mm256_set1_epi8(needle[0]);
    const __m256i last  = _mm256_set1_epi8(needle[k - 1]);

    for (size_t i = 0; i < n; i += 32) {

        const __m256i block_first = _mm256_loadu_si256(reinterpret_cast<const __m256i*>(s + i));
        const __m256i block_last  = _mm256_loadu_si256(reinterpret_cast<const __m256i*>(s + i + k - 1));

        const __m256i eq_first = _mm256_cmpeq_epi8(first, block_first);
        const __m256i eq_last  = _mm256_cmpeq_epi8(last, block_last);

        uint32_t mask = _mm256_movemask_epi8(_mm256_and_si256(eq_first, eq_last));

        while (mask != 0) {

            const auto bitpos = bits::get_first_bit_set(mask);

            if (memcmp(s + i + bitpos, needle, k - 1) == 0) {
                return i + bitpos;
            }

            mask = bits::clear_leftmost_set(mask);
        }
    }

    return std::string::npos;
}


Easier to use for our implementation

int substringFind(char *s, int n, char *substring, int k) {
    int[] first_let = substring[0] * 16;
    int[] second_let = substring[k-1] * 16

    for (int i = 0; i < n; i += 16) {
        first_block = s[i : i + 16]
        second_block = s[i + k - 1 : i + k - 1 + 16]
        eq_first = first_block - first_let + 1;
        eq_second = second_block - second_let + 1
        mask = eq_first * eq_second
        mask = mask -1 
        for (int j = 0; j < 16; j++) {
            if(mask[j] == 0) {
                sub_check = s[i + j : i + j + k - 1];
                diff = sub_check - substring
                dot = diff dot 1
                if(do == 0) {
                    print(i +j)
                    return;
                }
            }
        }
    }
    return 0;
}

assembly Psuedocode:
Store string to 0x8000... 0xa000 (use python to generate code to do this)
Store substring to 0xb000 - 0xb00f max length 16
Store first letter of subtring to 0xb100 - 0xb10f
Store second letter of substring to 0xb200 - 0xb20f
Store string len to r1
Store substring len to r2
# need python for this
Load vr0 to be 0xb100 - 0xb10f (the first letter)
Load vr1 to be 0xb200 - 0xb20f (the last letter)
move 0 to r3
:loop1
r4 = r3 + r2
r4 = r4 - 1
vr2 = 0x8000 + r3 : 0x8000 + r3 + 16
vr3 = 0x8000 + r4 : 0x8000 + r4 + 16
vr4 = vr2 - vr0
vr5 = vr3 - vr1
vr4 = vr4 + 1
vr5 = vr5 + 1
vr7 = vr4 vdot vr5
vr7 = vr7 - 1
store vr7 0xc000
r5 = 0
:inner loop start
r8 = 0xc000 + r5
r7 = load r8
jnz r7 end if1
vr8 =  0x8000 + r3 + r5 : 0x8000 + r3 + r5 + r2
vr9 = 0xb000 : 0xb000 + r2
vr10 = vr8 - vr9
r10 = vr10 * 1
jnz r10 end if1
print(r3 + r5)
jz r0 end
:end if1
r5 = r5 + 1
r8 = r5 - 16
jnz r8 inner loop start
r3 = r3 + 16
r9 = r1 - r3
jns loop 1
print '-'
print '1'
:end
HALT

# we are looking for "world" in "Hello world"
# this was made using store text.py


//Code minus python stuff
movl r6,0
movh r6,177
vld vr0,r6,15
movh r6,178
vld vr1,r6,15
movh r6,224
vld vr14,r6,15
movl r3,0
movl r11,255
movh r11,0
movl r12,255
movh r12,0
movl r13,255
movh r13,0
movl r14,255
movh r14,0
:loop1 # this address is important r11
add r4,r3,r2
movl r7,1
sub r4,r4,r7
movh r6,128
add r7,r6,r3
vld vr2,r7,15
add r7,r6,r4
vld vr3,r7,15
vsub vr4,vr2,vr0
vsub vr5,vr3,vr1
vadd vr4,vr4,vr14
vadd vr5,vr5,vr14
vdot vr7,vr4,vr5
vsub vr7,vr7,vr14
movh r6,192
vst vr7,r6,15
movl r5,0
:loop2know this address should be r12
add r8,r6,r5
ld r7,r8
jnz r13,r7
movh r6,128
add r15,r6,r3
add r15,r15,r5
vld vr8,r15,4 #change this to be length of word - 1
movh r6,176
vld vr9,r6,4 #also needs to be length of word
vsub vr10,vr8,vr9
vdot r10,vr10,vr14
jnz r13,r10
add r0,r3,r5
jz r14,r0
:end if should be r13
movl r15,1
add r5,r5,r15
movl r15,16
sub r8,r5,r15
jnz r12,r8
movl r15,16
add r3,r3,r15
sub r9,r1,r3
jns r11,r9
movl r0,45
movl r0,49
:end
HALT





