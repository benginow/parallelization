$date
	Tue May  4 22:11:24 2021
$end
$version
	Icarus Verilog
$end
$timescale
	1ps
$end
$scope module main $end
$var wire 4 ! c_opcode [3:0] $end
$var wire 1 " c_stall $end
$var wire 16 # d_ins [15:0] $end
$var wire 1 $ d_is_jns $end
$var wire 1 % d_is_jnz $end
$var wire 1 & d_is_js $end
$var wire 1 ' d_is_jz $end
$var wire 1 ( d_is_ld $end
$var wire 1 ) d_is_mem $end
$var wire 1 * d_is_st $end
$var wire 1 + d_is_vector_op $end
$var wire 1 , d_stall $end
$var wire 1 - f1_stall $end
$var wire 1 . f1_valid $end
$var wire 1 / f2_stall $end
$var wire 1 0 flush $end
$var wire 16 1 fr_ra_val [15:0] $end
$var wire 16 2 fr_rx_val [15:0] $end
$var wire 1 3 fr_stall $end
$var wire 4 4 fr_vra_size [3:0] $end
$var wire 256 5 fr_vra_val [255:0] $end
$var wire 4 6 fr_vrx_size [3:0] $end
$var wire 256 7 fr_vrx_val [255:0] $end
$var wire 16 8 instr_mem_raddr [15:0] $end
$var wire 16 9 mem_bank_0_raddr [15:0] $end
$var wire 16 : mem_bank_0_waddr [15:0] $end
$var wire 16 ; mem_bank_0_wdata [15:0] $end
$var wire 1 < mem_bank_0_wen $end
$var wire 16 = mem_bank_1_raddr [15:0] $end
$var wire 16 > mem_bank_1_waddr [15:0] $end
$var wire 16 ? mem_bank_1_wdata [15:0] $end
$var wire 1 @ mem_bank_1_wen $end
$var wire 16 A mem_bank_2_raddr [15:0] $end
$var wire 16 B mem_bank_2_waddr [15:0] $end
$var wire 16 C mem_bank_2_wdata [15:0] $end
$var wire 1 D mem_bank_2_wen $end
$var wire 16 E mem_bank_3_raddr [15:0] $end
$var wire 16 F mem_bank_3_waddr [15:0] $end
$var wire 16 G mem_bank_3_wdata [15:0] $end
$var wire 1 H mem_bank_3_wen $end
$var wire 1 I pipe_1_valid $end
$var wire 1 J pipe_2_valid $end
$var wire 1 K pipe_3_valid $end
$var wire 4 L reg_raddr0 [3:0] $end
$var wire 4 M reg_waddr [3:0] $end
$var wire 16 N reg_wdata [15:0] $end
$var wire 1 O reg_wen $end
$var wire 4 P vreg_raddr0 [3:0] $end
$var wire 4 Q vreg_raddr1 [3:0] $end
$var wire 4 R vreg_waddr [3:0] $end
$var wire 256 S vreg_wdata [255:0] $end
$var wire 1 T vreg_wen $end
$var wire 4 U vreg_wlen [3:0] $end
$var wire 1 V wb_flush $end
$var wire 1 W wb_is_jns $end
$var wire 1 X wb_is_jnz $end
$var wire 1 Y wb_is_js $end
$var wire 1 Z wb_is_jz $end
$var wire 1 [ wb_is_ld $end
$var wire 1 \ wb_is_mem $end
$var wire 1 ] wb_is_print $end
$var wire 1 ^ wb_is_st $end
$var wire 1 _ wb_is_vector_op $end
$var wire 1 ` wb_mem_bank_wen_0 $end
$var wire 1 a wb_mem_bank_wen_1 $end
$var wire 1 b wb_mem_bank_wen_2 $end
$var wire 1 c wb_mem_bank_wen_3 $end
$var wire 1 d wb_stall $end
$var wire 1 e wb_writes_reg $end
$var wire 1 f wb_writes_vreg $end
$var wire 16 g x2_mem_0 [15:0] $end
$var wire 16 h x2_mem_1 [15:0] $end
$var wire 16 i x2_mem_2 [15:0] $end
$var wire 16 j x2_mem_3 [15:0] $end
$var wire 16 k x2_overflow_0 [15:0] $end
$var wire 16 l x2_overflow_1 [15:0] $end
$var wire 16 m x2_overflow_2 [15:0] $end
$var wire 16 n x2_overflow_3 [15:0] $end
$var wire 16 o x2_pipe_3_result [15:0] $end
$var wire 16 p x2_pipe_2_result [15:0] $end
$var wire 16 q x2_pipe_1_result [15:0] $end
$var wire 16 r x2_pipe_0_result [15:0] $end
$var wire 1 s wb_take_jump $end
$var wire 4 t wb_rt [3:0] $end
$var wire 4 u wb_rb [3:0] $end
$var wire 4 v wb_ra [3:0] $end
$var wire 3 w wb_num_stall_cycles [2:0] $end
$var wire 1 x wb_is_vsub $end
$var wire 1 y wb_is_vst $end
$var wire 1 z wb_is_vmul $end
$var wire 1 { wb_is_vld $end
$var wire 1 | wb_is_vdot $end
$var wire 1 } wb_is_vdiv $end
$var wire 1 ~ wb_is_vadd $end
$var wire 1 !" wb_is_sub $end
$var wire 1 "" wb_is_scalar_mem $end
$var wire 1 #" wb_is_mul $end
$var wire 1 $" wb_is_movl $end
$var wire 1 %" wb_is_movh $end
$var wire 1 &" wb_is_jmp $end
$var wire 1 '" wb_is_invalid_op $end
$var wire 1 (" wb_is_halt $end
$var wire 1 )" wb_is_div $end
$var wire 1 *" wb_is_add $end
$var wire 16 +" vrx_entry9 [15:0] $end
$var wire 16 ," vrx_entry8 [15:0] $end
$var wire 16 -" vrx_entry7 [15:0] $end
$var wire 16 ." vrx_entry6 [15:0] $end
$var wire 16 /" vrx_entry5 [15:0] $end
$var wire 16 0" vrx_entry4 [15:0] $end
$var wire 16 1" vrx_entry3 [15:0] $end
$var wire 16 2" vrx_entry2 [15:0] $end
$var wire 16 3" vrx_entry15 [15:0] $end
$var wire 16 4" vrx_entry14 [15:0] $end
$var wire 16 5" vrx_entry13 [15:0] $end
$var wire 16 6" vrx_entry12 [15:0] $end
$var wire 16 7" vrx_entry11 [15:0] $end
$var wire 16 8" vrx_entry10 [15:0] $end
$var wire 16 9" vrx_entry1 [15:0] $end
$var wire 16 :" vrx_entry0 [15:0] $end
$var wire 4 ;" vreg_len1 [3:0] $end
$var wire 4 <" vreg_len0 [3:0] $end
$var wire 256 =" vreg_data1 [255:0] $end
$var wire 256 >" vreg_data0 [255:0] $end
$var wire 16 ?" vra_entry9 [15:0] $end
$var wire 16 @" vra_entry8 [15:0] $end
$var wire 16 A" vra_entry7 [15:0] $end
$var wire 16 B" vra_entry6 [15:0] $end
$var wire 16 C" vra_entry5 [15:0] $end
$var wire 16 D" vra_entry4 [15:0] $end
$var wire 16 E" vra_entry3 [15:0] $end
$var wire 16 F" vra_entry2 [15:0] $end
$var wire 16 G" vra_entry15 [15:0] $end
$var wire 16 H" vra_entry14 [15:0] $end
$var wire 16 I" vra_entry13 [15:0] $end
$var wire 16 J" vra_entry12 [15:0] $end
$var wire 16 K" vra_entry11 [15:0] $end
$var wire 16 L" vra_entry10 [15:0] $end
$var wire 16 M" vra_entry1 [15:0] $end
$var wire 16 N" vra_entry0 [15:0] $end
$var wire 4 O" reg_raddr1 [3:0] $end
$var wire 16 P" reg_data1 [15:0] $end
$var wire 16 Q" reg_data0 [15:0] $end
$var wire 16 R" pipe_3_rx_val [15:0] $end
$var wire 16 S" pipe_3_ra_val [15:0] $end
$var wire 16 T" pipe_2_rx_val [15:0] $end
$var wire 16 U" pipe_2_ra_val [15:0] $end
$var wire 16 V" pipe_1_rx_val [15:0] $end
$var wire 16 W" pipe_1_ra_val [15:0] $end
$var wire 16 X" pipe_0_rx_val [15:0] $end
$var wire 16 Y" pipe_0_ra_val [15:0] $end
$var wire 16 Z" mem_bank_3_data [15:0] $end
$var wire 16 [" mem_bank_2_data [15:0] $end
$var wire 16 \" mem_bank_1_data [15:0] $end
$var wire 16 ]" mem_bank_0_data [15:0] $end
$var wire 16 ^" instr_mem_data [15:0] $end
$var wire 3 _" fr_num_stall_cycles [2:0] $end
$var wire 4 `" d_subcode [3:0] $end
$var wire 1 a" d_rx $end
$var wire 4 b" d_rt [3:0] $end
$var wire 4 c" d_rb [3:0] $end
$var wire 4 d" d_ra [3:0] $end
$var wire 4 e" d_opcode [3:0] $end
$var wire 1 f" d_is_vsub $end
$var wire 1 g" d_is_vst $end
$var wire 1 h" d_is_vmul $end
$var wire 1 i" d_is_vld $end
$var wire 1 j" d_is_vdot $end
$var wire 1 k" d_is_vdiv $end
$var wire 1 l" d_is_vadd $end
$var wire 1 m" d_is_sub $end
$var wire 1 n" d_is_scalar_mem $end
$var wire 1 o" d_is_mul $end
$var wire 1 p" d_is_movl $end
$var wire 1 q" d_is_movh $end
$var wire 1 r" d_is_jmp $end
$var wire 1 s" d_is_halt $end
$var wire 1 t" d_is_div $end
$var wire 1 u" d_is_add $end
$var wire 1 v" clk $end
$var reg 4 w" c_ins [3:0] $end
$var reg 16 x" c_pc [15:0] $end
$var reg 16 y" c_pipe_0_result [15:0] $end
$var reg 16 z" c_pipe_1_result [15:0] $end
$var reg 16 {" c_pipe_2_result [15:0] $end
$var reg 16 |" c_pipe_3_result [15:0] $end
$var reg 16 }" c_scalar_output [15:0] $end
$var reg 4 ~" c_stall_state [3:0] $end
$var reg 16 !# c_temp_vector_0 [15:0] $end
$var reg 16 "# c_temp_vector_1 [15:0] $end
$var reg 16 ## c_temp_vector_10 [15:0] $end
$var reg 16 $# c_temp_vector_11 [15:0] $end
$var reg 16 %# c_temp_vector_12 [15:0] $end
$var reg 16 &# c_temp_vector_13 [15:0] $end
$var reg 16 '# c_temp_vector_14 [15:0] $end
$var reg 16 (# c_temp_vector_15 [15:0] $end
$var reg 16 )# c_temp_vector_2 [15:0] $end
$var reg 16 *# c_temp_vector_3 [15:0] $end
$var reg 16 +# c_temp_vector_4 [15:0] $end
$var reg 16 ,# c_temp_vector_5 [15:0] $end
$var reg 16 -# c_temp_vector_6 [15:0] $end
$var reg 16 .# c_temp_vector_7 [15:0] $end
$var reg 16 /# c_temp_vector_8 [15:0] $end
$var reg 16 0# c_temp_vector_9 [15:0] $end
$var reg 1 1# c_valid $end
$var reg 4 2# c_vra_size [3:0] $end
$var reg 4 3# c_vrx_size [3:0] $end
$var reg 16 4# d_last_ins [15:0] $end
$var reg 16 5# d_pc [15:0] $end
$var reg 1 6# d_valid $end
$var reg 16 7# f1_pc [15:0] $end
$var reg 16 8# f2_pc [15:0] $end
$var reg 1 9# f2_valid $end
$var reg 16 :# fr_ins [15:0] $end
$var reg 1 ;# fr_is_vector_op $end
$var reg 16 <# fr_pc [15:0] $end
$var reg 4 =# fr_ra [3:0] $end
$var reg 4 ># fr_rx [3:0] $end
$var reg 4 ?# fr_stall_state [3:0] $end
$var reg 1 @# fr_valid $end
$var reg 1 A# halt $end
$var reg 16 B# wb_ins [15:0] $end
$var reg 16 C# wb_pc [15:0] $end
$var reg 16 D# wb_ra_val [15:0] $end
$var reg 16 E# wb_scalar_output [15:0] $end
$var reg 4 F# wb_stall_state [3:0] $end
$var reg 1 G# wb_valid $end
$var reg 256 H# wb_vec_reg [255:0] $end
$var reg 4 I# wb_vra_size [3:0] $end
$var reg 4 J# wb_vrx_size [3:0] $end
$var reg 16 K# x2_pc [15:0] $end
$var reg 4 L# x2_stall_state [3:0] $end
$var reg 1 M# x2_valid $end
$var reg 4 N# x2_vra_size [3:0] $end
$var reg 4 O# x2_vrx_size [3:0] $end
$var reg 16 P# x_pc [15:0] $end
$var reg 4 Q# x_stall_state [3:0] $end
$var reg 1 R# x_valid $end
$var reg 4 S# x_vra_size [3:0] $end
$var reg 4 T# x_vrx_size [3:0] $end
$scope module clock $end
$var wire 1 v" clk $end
$var reg 1 U# theClock $end
$upscope $end
$scope module ctr $end
$var wire 1 v" clk $end
$var wire 1 A# isHalt $end
$var reg 32 V# count [31:0] $end
$upscope $end
$scope module instr_bank $end
$var wire 1 v" clk $end
$var wire 15 W# raddr0_ [15:1] $end
$var wire 16 X# rdata0_ [15:0] $end
$var reg 15 Y# raddr0 [15:1] $end
$var reg 16 Z# rdata0 [15:0] $end
$upscope $end
$scope module mem_bank0 $end
$var wire 1 v" clk $end
$var wire 15 [# raddr0_ [15:1] $end
$var wire 16 \# rdata0_ [15:0] $end
$var wire 15 ]# waddr [15:1] $end
$var wire 16 ^# wdata [15:0] $end
$var wire 1 < wen $end
$var reg 15 _# raddr0 [15:1] $end
$var reg 16 `# rdata0 [15:0] $end
$upscope $end
$scope module mem_bank1 $end
$var wire 1 v" clk $end
$var wire 15 a# raddr0_ [15:1] $end
$var wire 16 b# rdata0_ [15:0] $end
$var wire 15 c# waddr [15:1] $end
$var wire 16 d# wdata [15:0] $end
$var wire 1 @ wen $end
$var reg 15 e# raddr0 [15:1] $end
$var reg 16 f# rdata0 [15:0] $end
$upscope $end
$scope module mem_bank2 $end
$var wire 1 v" clk $end
$var wire 15 g# raddr0_ [15:1] $end
$var wire 16 h# rdata0_ [15:0] $end
$var wire 15 i# waddr [15:1] $end
$var wire 16 j# wdata [15:0] $end
$var wire 1 D wen $end
$var reg 15 k# raddr0 [15:1] $end
$var reg 16 l# rdata0 [15:0] $end
$upscope $end
$scope module mem_bank3 $end
$var wire 1 v" clk $end
$var wire 15 m# raddr0_ [15:1] $end
$var wire 16 n# rdata0_ [15:0] $end
$var wire 15 o# waddr [15:1] $end
$var wire 16 p# wdata [15:0] $end
$var wire 1 H wen $end
$var reg 15 q# raddr0 [15:1] $end
$var reg 16 r# rdata0 [15:0] $end
$upscope $end
$scope module pipe_0 $end
$var wire 1 v" clk $end
$var wire 16 s# fr_ins [15:0] $end
$var wire 16 t# fr_operand_1 [15:0] $end
$var wire 16 u# fr_operand_2 [15:0] $end
$var wire 16 v# fr_pc [15:0] $end
$var wire 16 w# x2_mem [15:0] $end
$var wire 16 x# x2_overflow_mod [15:0] $end
$var wire 1 y# x_isJns $end
$var wire 1 z# x_isJnz $end
$var wire 1 {# x_isJs $end
$var wire 1 |# x_isJz $end
$var wire 1 }# x_isMem $end
$var wire 1 ~# x_isSt $end
$var wire 1 !$ x_is_mul $end
$var wire 4 "$ x_subcode [3:0] $end
$var wire 16 #$ x_result [15:0] $end
$var wire 4 $$ x_opcode [3:0] $end
$var wire 16 %$ x_movl_result [15:0] $end
$var wire 8 &$ x_ival [7:0] $end
$var wire 1 '$ x_is_sub $end
$var wire 1 ($ x_is_div $end
$var wire 1 )$ x_is_add $end
$var wire 1 *$ x_isScalarMem $end
$var wire 1 +$ x_isMovl $end
$var wire 1 ,$ x_isMovh $end
$var wire 1 -$ x_isJmp $end
$var wire 16 .$ x2_result [15:0] $end
$var wire 4 /$ x2_opcode [3:0] $end
$var wire 1 0$ x2_is_ld $end
$var reg 16 1$ x2_ins [15:0] $end
$var reg 16 2$ x2_pc [15:0] $end
$var reg 16 3$ x2_prev_result [15:0] $end
$var reg 16 4$ x_ins [15:0] $end
$var reg 16 5$ x_operand_1 [15:0] $end
$var reg 16 6$ x_operand_2 [15:0] $end
$var reg 16 7$ x_pc [15:0] $end
$upscope $end
$scope module pipe_1 $end
$var wire 1 v" clk $end
$var wire 16 8$ fr_ins [15:0] $end
$var wire 16 9$ fr_operand_1 [15:0] $end
$var wire 16 :$ fr_operand_2 [15:0] $end
$var wire 16 ;$ fr_pc [15:0] $end
$var wire 16 <$ x2_mem [15:0] $end
$var wire 16 =$ x2_overflow_mod [15:0] $end
$var wire 1 >$ x_isJns $end
$var wire 1 ?$ x_isJnz $end
$var wire 1 @$ x_isJs $end
$var wire 1 A$ x_isJz $end
$var wire 1 B$ x_isMem $end
$var wire 1 C$ x_isSt $end
$var wire 1 D$ x_is_mul $end
$var wire 4 E$ x_subcode [3:0] $end
$var wire 16 F$ x_result [15:0] $end
$var wire 4 G$ x_opcode [3:0] $end
$var wire 16 H$ x_movl_result [15:0] $end
$var wire 8 I$ x_ival [7:0] $end
$var wire 1 J$ x_is_sub $end
$var wire 1 K$ x_is_div $end
$var wire 1 L$ x_is_add $end
$var wire 1 M$ x_isScalarMem $end
$var wire 1 N$ x_isMovl $end
$var wire 1 O$ x_isMovh $end
$var wire 1 P$ x_isJmp $end
$var wire 16 Q$ x2_result [15:0] $end
$var wire 4 R$ x2_opcode [3:0] $end
$var wire 1 S$ x2_is_ld $end
$var reg 16 T$ x2_ins [15:0] $end
$var reg 16 U$ x2_pc [15:0] $end
$var reg 16 V$ x2_prev_result [15:0] $end
$var reg 16 W$ x_ins [15:0] $end
$var reg 16 X$ x_operand_1 [15:0] $end
$var reg 16 Y$ x_operand_2 [15:0] $end
$var reg 16 Z$ x_pc [15:0] $end
$upscope $end
$scope module pipe_2 $end
$var wire 1 v" clk $end
$var wire 16 [$ fr_ins [15:0] $end
$var wire 16 \$ fr_operand_1 [15:0] $end
$var wire 16 ]$ fr_operand_2 [15:0] $end
$var wire 16 ^$ fr_pc [15:0] $end
$var wire 16 _$ x2_mem [15:0] $end
$var wire 16 `$ x2_overflow_mod [15:0] $end
$var wire 1 a$ x_isJns $end
$var wire 1 b$ x_isJnz $end
$var wire 1 c$ x_isJs $end
$var wire 1 d$ x_isJz $end
$var wire 1 e$ x_isMem $end
$var wire 1 f$ x_isSt $end
$var wire 1 g$ x_is_mul $end
$var wire 4 h$ x_subcode [3:0] $end
$var wire 16 i$ x_result [15:0] $end
$var wire 4 j$ x_opcode [3:0] $end
$var wire 16 k$ x_movl_result [15:0] $end
$var wire 8 l$ x_ival [7:0] $end
$var wire 1 m$ x_is_sub $end
$var wire 1 n$ x_is_div $end
$var wire 1 o$ x_is_add $end
$var wire 1 p$ x_isScalarMem $end
$var wire 1 q$ x_isMovl $end
$var wire 1 r$ x_isMovh $end
$var wire 1 s$ x_isJmp $end
$var wire 16 t$ x2_result [15:0] $end
$var wire 4 u$ x2_opcode [3:0] $end
$var wire 1 v$ x2_is_ld $end
$var reg 16 w$ x2_ins [15:0] $end
$var reg 16 x$ x2_pc [15:0] $end
$var reg 16 y$ x2_prev_result [15:0] $end
$var reg 16 z$ x_ins [15:0] $end
$var reg 16 {$ x_operand_1 [15:0] $end
$var reg 16 |$ x_operand_2 [15:0] $end
$var reg 16 }$ x_pc [15:0] $end
$upscope $end
$scope module pipe_3 $end
$var wire 1 v" clk $end
$var wire 16 ~$ fr_ins [15:0] $end
$var wire 16 !% fr_operand_1 [15:0] $end
$var wire 16 "% fr_operand_2 [15:0] $end
$var wire 16 #% fr_pc [15:0] $end
$var wire 16 $% x2_mem [15:0] $end
$var wire 16 %% x2_overflow_mod [15:0] $end
$var wire 1 &% x_isJns $end
$var wire 1 '% x_isJnz $end
$var wire 1 (% x_isJs $end
$var wire 1 )% x_isJz $end
$var wire 1 *% x_isMem $end
$var wire 1 +% x_isSt $end
$var wire 1 ,% x_is_mul $end
$var wire 4 -% x_subcode [3:0] $end
$var wire 16 .% x_result [15:0] $end
$var wire 4 /% x_opcode [3:0] $end
$var wire 16 0% x_movl_result [15:0] $end
$var wire 8 1% x_ival [7:0] $end
$var wire 1 2% x_is_sub $end
$var wire 1 3% x_is_div $end
$var wire 1 4% x_is_add $end
$var wire 1 5% x_isScalarMem $end
$var wire 1 6% x_isMovl $end
$var wire 1 7% x_isMovh $end
$var wire 1 8% x_isJmp $end
$var wire 16 9% x2_result [15:0] $end
$var wire 4 :% x2_opcode [3:0] $end
$var wire 1 ;% x2_is_ld $end
$var reg 16 <% x2_ins [15:0] $end
$var reg 16 =% x2_pc [15:0] $end
$var reg 16 >% x2_prev_result [15:0] $end
$var reg 16 ?% x_ins [15:0] $end
$var reg 16 @% x_operand_1 [15:0] $end
$var reg 16 A% x_operand_2 [15:0] $end
$var reg 16 B% x_pc [15:0] $end
$upscope $end
$scope module regs $end
$var wire 1 v" clk $end
$var wire 4 C% raddr0_ [3:0] $end
$var wire 4 D% raddr1_ [3:0] $end
$var wire 16 E% rdata0 [15:0] $end
$var wire 16 F% rdata1 [15:0] $end
$var wire 4 G% waddr [3:0] $end
$var wire 16 H% wdata [15:0] $end
$var wire 1 O wen $end
$var reg 4 I% raddr0 [3:0] $end
$var reg 4 J% raddr1 [3:0] $end
$upscope $end
$scope module vregs $end
$var wire 1 v" clk $end
$var wire 4 K% rAddr0 [3:0] $end
$var wire 4 L% rAddr1 [3:0] $end
$var wire 256 M% rData0 [255:0] $end
$var wire 256 N% rData1 [255:0] $end
$var wire 4 O% r_len0 [3:0] $end
$var wire 4 P% r_len1 [3:0] $end
$var wire 4 Q% wAddr [3:0] $end
$var wire 256 R% wData [255:0] $end
$var wire 1 T wEn $end
$var wire 4 S% wLen [3:0] $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
bz S%
bx R%
bx Q%
bx P%
bx O%
bx N%
bx M%
bz L%
bx K%
bx J%
bx I%
bx H%
bx G%
bx F%
bx E%
b0x D%
bx C%
bx B%
bx A%
bx @%
bx ?%
bx >%
bx =%
bx <%
0;%
bx :%
bx 9%
x8%
x7%
x6%
x5%
04%
03%
02%
bx 1%
bx 0%
bx /%
bx .%
bx -%
0,%
x+%
x*%
x)%
x(%
x'%
x&%
bz %%
bx $%
bx #%
bx "%
bx !%
bx ~$
bx }$
bx |$
bx {$
bx z$
bx y$
bx x$
bx w$
0v$
bx u$
bx t$
xs$
xr$
xq$
xp$
0o$
0n$
0m$
bx l$
bx k$
bx j$
bx i$
bx h$
0g$
xf$
xe$
xd$
xc$
xb$
xa$
bz `$
bx _$
bx ^$
bx ]$
bx \$
bx [$
bx Z$
bx Y$
bx X$
bx W$
bx V$
bx U$
bx T$
0S$
bx R$
bx Q$
xP$
xO$
xN$
xM$
0L$
0K$
0J$
bx I$
bx H$
bx G$
bx F$
bx E$
0D$
xC$
xB$
xA$
x@$
x?$
x>$
bz =$
bx <$
bx ;$
bx :$
bx 9$
bx 8$
bx 7$
bx 6$
bx 5$
bx 4$
bx 3$
bx 2$
bx 1$
00$
bx /$
bx .$
x-$
x,$
x+$
x*$
0)$
0($
0'$
bx &$
bx %$
bx $$
bx #$
bx "$
0!$
x~#
x}#
x|#
x{#
xz#
xy#
bz x#
bx w#
bx v#
bx u#
bx t#
bx s#
bx r#
bx q#
bz p#
bz o#
bx n#
bz m#
bx l#
bx k#
bz j#
bz i#
bx h#
bz g#
bx f#
bx e#
bz d#
bz c#
bx b#
bz a#
bx `#
bx _#
bz ^#
bz ]#
bx \#
bz [#
bx Z#
bx Y#
bx X#
b0 W#
b0 V#
1U#
bx T#
bx S#
0R#
bx Q#
bx P#
bx O#
bx N#
0M#
bx L#
bx K#
bx J#
bx I#
bx H#
0G#
b0 F#
bx E#
bx D#
bx C#
bx B#
0A#
0@#
b0 ?#
bx >#
bx =#
bx <#
x;#
bx :#
09#
b1111111111111111 8#
b0 7#
06#
b1111111111111111 5#
bx 4#
bx 3#
bx 2#
01#
bx 0#
bx /#
bx .#
bx -#
bx ,#
bx +#
bx *#
bx )#
bx (#
bx '#
bx &#
bx %#
bx $#
bx ##
bx "#
bx !#
bx ~"
bx }"
bx |"
bx {"
bx z"
bx y"
bx x"
bx w"
1v"
xu"
xt"
xs"
xr"
xq"
xp"
xo"
xn"
xm"
xl"
xk"
xj"
xi"
xh"
xg"
xf"
bx e"
bx d"
bx c"
bx b"
xa"
bx `"
bx _"
bx ^"
bx ]"
bx \"
bx ["
bx Z"
bx Y"
bx X"
bx W"
bx V"
bx U"
bx T"
bx S"
bx R"
bx Q"
bx P"
b0x O"
bx N"
bx M"
bx L"
bx K"
bx J"
bx I"
bx H"
bx G"
bx F"
bx E"
bx D"
bx C"
bx B"
bx A"
bx @"
bx ?"
bx >"
bx ="
bx <"
bx ;"
bx :"
bx 9"
bx 8"
bx 7"
bx 6"
bx 5"
bx 4"
bx 3"
bx 2"
bx 1"
bx 0"
bx /"
bx ."
bx -"
bx ,"
bx +"
x*"
x)"
x("
x'"
x&"
x%"
x$"
x#"
x""
x!"
x~
x}
x|
x{
xz
xy
xx
bx w
bx v
bx u
bx t
xs
bx r
bx q
bx p
bx o
bz n
bz m
bz l
bz k
bx j
bx i
bx h
bx g
xf
xe
1d
xc
xb
xa
x`
x_
x^
0]
x\
x[
xZ
xY
xX
xW
0V
bz U
0T
bx S
bx R
bz Q
bx P
zO
bx N
bx M
bx L
xK
xJ
xI
zH
bz G
bz F
bz E
zD
bz C
bz B
bz A
z@
bz ?
bz >
bz =
z<
bz ;
bz :
bz 9
b0 8
bx 7
bx 6
bx 5
bx 4
13
bx 2
bx 1
00
1/
1.
1-
1,
x+
x*
x)
x(
x'
x&
x%
x$
bx #
1"
bx !
$end
#500
0v"
0U#
#1000
b1 V#
b0x J%
b0 Y#
bz _#
bz e#
bz k#
bz q#
b0 Q#
b0xxxx B#
1v"
1U#
#1500
0v"
0U#
#2000
0'"
0"
0d
b0 w
b0 O"
b0 D%
0a"
0+
0_
0f
1*
1^
0s
1)
1e
1\
0c
0b
0a
0`
0'
0%
0&
0$
0(
0Z
0X
0Y
0W
0[
1]
0u"
0m"
0o"
0t"
1p"
0q"
0r"
1n"
0l"
0f"
0h"
0k"
0i"
0g"
0j"
0s"
0*"
0!"
0#"
0)"
1$"
0%"
0&"
1""
0~
0x
0z
0}
0{
0y
0|
0("
b100 e"
b1 `"
b100 P
b100 K%
b100 L
b100 C%
b100 d"
b1 c"
b0 b"
b100 v
b1 u
b0 R
b0 Q%
b0 M
b0 G%
b0 t
b0 L#
b100010000010000 #
b100010000010000 ^"
b100010000010000 X#
b100010000010000 Z#
b10 V#
1v"
1U#
#2500
0v"
0U#
#3000
b11 V#
b0 J%
b100 I%
b0 ~"
1v"
1U#
#3500
0v"
0U#
#4000
b100 V#
1v"
1U#
#4500
0v"
0U#
#5000
b101 V#
1v"
1U#
#5500
0v"
0U#
#6000
b110 V#
1v"
1U#
#6500
0v"
0U#
#7000
b111 V#
1v"
1U#
#7500
0v"
0U#
#8000
b1000 V#
1v"
1U#
#8500
0v"
0U#
#9000
b1001 V#
1v"
1U#
#9500
0v"
0U#
#10000
b1010 V#
1v"
1U#
#10500
0v"
0U#
#11000
b1011 V#
1v"
1U#
#11500
0v"
0U#
#12000
b1100 V#
1v"
1U#
#12500
0v"
0U#
#13000
b1101 V#
1v"
1U#
#13500
0v"
0U#
#14000
b1110 V#
1v"
1U#
#14500
0v"
0U#
#15000
b1111 V#
1v"
1U#
#15500
0v"
0U#
#16000
b10000 V#
1v"
1U#
#16500
0v"
0U#
#17000
b10001 V#
1v"
1U#
#17500
0v"
0U#
#18000
b10010 V#
1v"
1U#
#18500
0v"
0U#
#19000
b10011 V#
1v"
1U#
#19500
0v"
0U#
#20000
b10100 V#
1v"
1U#
#20500
0v"
0U#
#21000
b10101 V#
1v"
1U#
#21500
0v"
0U#
#22000
b10110 V#
1v"
1U#
#22500
0v"
0U#
#23000
b10111 V#
1v"
1U#
#23500
0v"
0U#
#24000
b11000 V#
1v"
1U#
#24500
0v"
0U#
#25000
b11001 V#
1v"
1U#
#25500
0v"
0U#
#26000
b11010 V#
1v"
1U#
#26500
0v"
0U#
#27000
b11011 V#
1v"
1U#
#27500
0v"
0U#
#28000
b11100 V#
1v"
1U#
#28500
0v"
0U#
#29000
b11101 V#
1v"
1U#
#29500
0v"
0U#
#30000
b11110 V#
1v"
1U#
#30500
0v"
0U#
#31000
b11111 V#
1v"
1U#
#31500
0v"
0U#
#32000
b100000 V#
1v"
1U#
#32500
0v"
0U#
#33000
b100001 V#
1v"
1U#
#33500
0v"
0U#
#34000
b100010 V#
1v"
1U#
#34500
0v"
0U#
#35000
b100011 V#
1v"
1U#
#35500
0v"
0U#
#36000
b100100 V#
1v"
1U#
#36500
0v"
0U#
#37000
b100101 V#
1v"
1U#
#37500
0v"
0U#
#38000
b100110 V#
1v"
1U#
#38500
0v"
0U#
#39000
b100111 V#
1v"
1U#
#39500
0v"
0U#
#40000
b101000 V#
1v"
1U#
#40500
0v"
0U#
#41000
b101001 V#
1v"
1U#
#41500
0v"
0U#
#42000
b101010 V#
1v"
1U#
#42500
0v"
0U#
#43000
b101011 V#
1v"
1U#
#43500
0v"
0U#
#44000
b101100 V#
1v"
1U#
#44500
0v"
0U#
#45000
b101101 V#
1v"
1U#
#45500
0v"
0U#
#46000
b101110 V#
1v"
1U#
#46500
0v"
0U#
#47000
b101111 V#
1v"
1U#
#47500
0v"
0U#
#48000
b110000 V#
1v"
1U#
#48500
0v"
0U#
#49000
b110001 V#
1v"
1U#
#49500
0v"
0U#
#50000
b110010 V#
1v"
1U#
#50500
0v"
0U#
#51000
1v"
1U#
