Special Info:
    - r0 is special:
        * reading from r0 always returns 0
        * writing to r0 interprets the the least significant
            8 bits as an ASCII code and prints that character
    - rF is special:
        * written to by mul and div, can change without explicit reference

encoding          instruction       description

0000aaaabbbbtttt  add rt,ra,rb      regs[t] = regs[a] + regs[b]
0001aaaabbbbtttt  sub rt,ra,rb      regs[t] = regs[a] - regs[b]
0010aaaabbbbtttt  mul rt,ra,rb      regs[t] = regs[a] * regs[b], regs[0xf] = OVERFLOW
0011aaaabbbbtttt  div rt,ra,rb      regs[t] = regs[a] / regs[b], regs[0xf] = MODULO

0100iiiiiiiitttt  movl rt,$imm      regs[t] = sign_extend(i)
0101iiiiiiiitttt  movh rt,$imm      regs[t] = (regs[t] & 0xff) | (i << 8)

0110aaaa0000tttt  jz rt,ra          pc = (regs[ra] == 0) ? regs[rt] : pc + 2
0110aaaa0001tttt  jnz rt,ra         pc = (regs[ra] != 0) ? regs[rt] : pc + 2
0110aaaa0010tttt  js rt,ra          pc = (regs[ra] < 0) ? regs[rt] : pc + 2
0110aaaa0011tttt  jns rt,ra         pc = (regs[ra] >= 0) ? regs[rt] : pc + 2

0111aaaa0000tttt  ld rt,ra          regs[t] = mem[regs[a]]
0111aaaa0001tttt  st rt,ra          mem[regs[a]] = regs[t]

1000aaaabbbbtttt  vadd vrt,vra,vrb  vregs[t] = vregs[a] + vregs[b]
1001aaaabbbbtttt  vsub vrt,vra,vrb  vregs[t] = vregs[a] - vregs[b]
1010aaaabbbbtttt  vmul vrt,vra,vrb  vregs[t] = vregs[a] * vregs[b]
1011aaaabbbbtttt  vdiv vrt,vra,vrb  vregs[t] = vregs[a] / vregs[b]

1100aaaaiiiitttt  vld vrt,vra,$imm  vregs[t] = mem[vregs[a]] : mem[vregs[a] + $imm + 1]
1100aaaaiiiitttt  vst vrt,vra,$imm  mem[vregs[a]] : mem[vregs[a] + $imm + 1] = vregs[t]

1101aaaabbbbtttt  vdot rt,vra,vrb   regs[t] = vregs[a] DOTPRODUCT vregs[b]

1111????????????  HALT